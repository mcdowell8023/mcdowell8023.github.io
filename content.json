{"meta":{"title":"mcdowell博客","subtitle":"博客+笔记","description":"javascript/vue/react/node OR 其他 笔记帖以及日常磨叨","author":"mcdowell","url":"http://mcdowell8023.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-06-27T00:39:20.096Z","updated":"2019-06-27T00:39:20.096Z","comments":false,"path":"/404.html","permalink":"http://mcdowell8023.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-07-16T17:10:29.168Z","updated":"2019-07-16T17:10:29.168Z","comments":false,"path":"about/index.html","permalink":"http://mcdowell8023.github.io/about/index.html","excerpt":"","text":"123456789101112131415161718192021222324252627// initlet me = nullconst timeAxis = ['1991', '2013', '2016', '2017', 'today']const person = function(name, sex) &#123; return &#123; name: name, sex: sex &#125;&#125;// thentimeAxis.map(year =&gt; &#123; if (year === '1991') &#123; me = new person('mcdowell', 'male') &#125; if (year === '2013') &#123; me.college = '邯郸学院' &#125; if (year === '2016') &#123; me.job = 'coder' me.skills = ['html', 'css', 'js', 'JQ'] &#125; if (year === '2017') &#123; me.skills = [...me.skills, 'react', 'vue'] &#125;&#125;)// checkconsole.log(me, '个人简介')"},{"title":"分类","date":"2019-06-27T00:39:20.097Z","updated":"2019-06-27T00:39:20.097Z","comments":false,"path":"categories/index.html","permalink":"http://mcdowell8023.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2019-06-27T00:39:20.097Z","updated":"2019-06-27T00:39:20.097Z","comments":false,"path":"books/index.html","permalink":"http://mcdowell8023.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-06-27T00:39:20.097Z","updated":"2019-06-27T00:39:20.097Z","comments":true,"path":"links/index.html","permalink":"http://mcdowell8023.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-06-27T00:39:20.097Z","updated":"2019-06-27T00:39:20.097Z","comments":false,"path":"repository/index.html","permalink":"http://mcdowell8023.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-27T00:39:20.098Z","updated":"2019-06-27T00:39:20.098Z","comments":false,"path":"tags/index.html","permalink":"http://mcdowell8023.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"sass学习笔记","slug":"sass学习笔记","date":"2018-10-25T12:20:28.000Z","updated":"2019-07-16T17:37:03.448Z","comments":true,"path":"2018/10/25/sass学习笔记/","link":"","permalink":"http://mcdowell8023.github.io/2018/10/25/sass学习笔记/","excerpt":"","text":"sass 介绍 特性在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 导入 (inline imports) 等功能通过函数进行颜色值与属性值的运算提供 控制指令 (control directives) 等高级功能自定义输出格式 语法分scss 和 sass 两种：scss ：仅在 CSS3 语法的基础上进行拓展，所有 CSS3 语法在 SCSS 中都是通用的【说白了就是带花括号那种，与css语法基本一致】sass ： 传统sass（缩进格式 (Indented Sass) ）使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性【没有｛｝和; 那种】任何一种格式可以直接 导入 (@import) 到另一种格式中使用，或者通过 sass-convert 命令行工具转换 CSS 功能拓展 嵌套规则123456789101112131415#main &#123;// 父级 width: 97%; p, div &#123; // 子级 font-size: 2em; a &#123; font-weight: bold; &#125; &#125; pre &#123; font-size: 3em; &#125; // 子级&#125;// build after#main &#123;width: 97%; &#125;#main p, #main div &#123;font-size: 2em;&#125;#main p a, #main div a &#123;font-weight: bold;&#125;#main pre &#123;font-size: 3em; &#125;嵌套功能避免了重复输入父选择器 （有说不要超过三层，否则会造成） 父选择器 &amp;1234567891011#main &#123; color: black; a &#123; font-weight: bold; &amp;:hover &#123; color: red; &#125; &#125;&#125;// build after#main &#123; color: black; &#125;#main a &#123; font-weight: bold; &#125;#main a:hover &#123; color: red; &#125;&amp; 会换成 父选择器（指向父级）；多层嵌套，最外层的父选择器会一层一层向下传递1234567#main &#123; color: black; &amp;-sidebar &#123; border: 1px solid; &#125;&#125;// build after#main &#123; color: black; &#125;#main-sidebar &#123;border: 1px solid; &#125;&amp; 必须作为选择器的第一个字符，其后可以跟随后缀 生成复合的选择器 属性嵌套sass可以 将属性嵌套在命名空间中,避免重复输入及方便管理12345678.funky &#123; font: &#123; // 可以包含自己的属性 如 font: 20px/24px &#123; family: fantasy; weight: bold; &#125;&#125;// build after.funky &#123;font: 20px/24px;font-family: fantasy;font-weight: bold; &#125; 占位符选择器 %foo常用的 id 与 class 选择器写法相似，只是 # 或 . 替换成了 %。必须通过 @extend 指令调用【具体了解，详看@extend-Only 选择器】 注释 多行注释 /* */被完整 编译到 CSS 文件 以及单行注释 //不会编译到css 文件 SassScriptSassScript 可作用于任何属性，允许属性使用变量、算数运算等额外功能 Interactive Shell可以在命令行中测试 SassScript 的功能。在命令行中输入 sass -i123456789$ sass -i&gt;&gt; &quot;Hello, Sassy World!&quot;&quot;Hello, Sassy World!&quot;&gt;&gt; 1px + 1px + 1px3px&gt;&gt; #777 + #777#eeeeee&gt;&gt; #777 + #888white 变量 $变量支持块级作用域1234567891011121314151617// 变量的声明$width: 5em;$blue: #f29e;// 变量的使用#main &#123; $height:30px; $red : red !global; // 在局部声明了全局变量 width: $width; height:$height; color: $blue;&#125;div&#123; height:$height; // 错误，局部变量只能在局部使用 color: $red;&#125;嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 !global 数据类型 （Data Types）数字： 1,2,3,10px字符串： “foo”,‘bar’,baz颜色：blue, #29ef, rgba(255,0,0,0.5)布尔值：true,false数组（list）,用空格或逗号分割：1.5rem 1em 0 2em / Helvetica, Arial, sans-serifmaps 相当于javascript的object：（key1:value1,key2:value2）SassScript 支持其他css属性，比如unicode字符集，或者！important（作为无引号字符串【不进行处理】） 字符串（String）#{}的使用1234567891011@mixin firefox-message($selector) &#123; body.firefox #&#123;$selector&#125;:before &#123; content: &quot;Hi, Firefox users!&quot;; &#125;&#125;@include firefox-message(&quot;.header&quot;);// build tobody.firefox .header:before &#123; content: &quot;Hi, Firefox users!&quot;; &#125;#{} (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名 数组 (Lists)数组常用于margin: 10px 15px 0 0 或者 font-face: Helvetica, Arial, sans-serif 这样通过空格或者逗号分隔的一系列的值 （独立的值也算作数组）数组方法：nth 直接访问数组中的某一项 （类似于jQ的eq）；join 数组拼接；append 数组中添加新值；@each 遍历数组中的每一项二维数组写法：1px 2px, 5px 6px 是包含 1px 2px 与 5px 6px 两个数组，用’,'分隔(1px 2px) (5px 6px) 是包含 1px 2px 与 5px 6px 两个数组，用’ '（空格）分隔（） 表示不包含任何值的空数组或map（在 Sass 3.3 版之后） MapsLists一样Maps主要为sassscript函数服务map-get函数用于查找键值map-merge函数用于map和新加的键值融合@each命令可添加样式到一个map中的每个键值对。Maps可用于任何Lists可用的地方，在List函数中 Map会被自动转换为List ，如 (key1: value1, key2: value2)会被List函数转换为 key1 value1, key2 value2 ，反之则不能。 运算所有数据类型均支持相等运算 == 或 != 数字运算 (Number Operations)加减乘除、取整等运算 (+, -, *, /, %)【会在不同单位间转换值】关系运算 &lt;, &gt;, &lt;=, &gt;= 也可用于数字运算1234567p &#123; width: 1in + 8pt;&#125;//build top &#123; width: 1.111in; &#125;除法（/）如果值，或值的一部分，是变量或者函数的返回值 font: 10px/8px;如果值被圆括号包裹 height: (500px/2);如果值是算数表达式的一部分 margin-left: 5px + 8px/2px; 持续更新中…","categories":[{"name":"web前端笔记","slug":"web前端笔记","permalink":"http://mcdowell8023.github.io/categories/web前端笔记/"}],"tags":[{"name":"sass","slug":"sass","permalink":"http://mcdowell8023.github.io/tags/sass/"}]}]}